<% layout("layouts/boilerplate") %>
<body>
  <% if (!currUser) { %>
    <h1 style="margin-left: 22rem;">Welcome please Login to Access </h1>
  <% } %>
  <% if (currUser) { %>
    <div class="container">
      <h3>Employee List</h3>
      <div class="d-flex justify-content-between align-items-center mb-3">
        <!-- Total Count of Employees -->
        <div style="margin-left: 60rem;">
          <p>Total Employees: <%= allListings.length %></p>
        </div>

        <!-- Create Employee Button aligned to the right -->
        <form method="GET" action="/listings/new">
          <button class="btn btn-dark">Create Employee</button>
        </form>
      </div>

      <!-- Search Bar, Filter by Active/Inactive, and Sort Options -->
      <div class="d-flex mb-3">
        <input type="text" id="searchBar" class="form-control me-2" placeholder="Search by Name, Email, ID, or Date" aria-label="Search" onkeyup="applyFilters()">

        <!-- Filter by Active/Inactive -->
        <select id="filterStatus" class="form-select ms-2" onchange="applyFilters()">
          <option value="">Filter by Status</option>
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>

        <!-- Sorting Dropdown -->
        <select id="sortBy" class="form-select ms-2" onchange="applyFilters()">
          <option value="">Sort by</option>
          <option value="name">Name</option>
          <option value="email">Email</option>
          <option value="id">ID</option>
          <option value="createdOn">Created On</option>
        </select>
      </div>

      <!-- Employee Table -->
      <table class="table table-bordered">
        <thead>
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Image</th>
            <th scope="col">Name</th>
            <th scope="col">Email</th>
            <th scope="col">Mobile</th>
            <th scope="col">Designation</th>
            <th scope="col">Gender</th>
            <th scope="col">Courses</th>
            <th scope="col">Created On</th>
            <th scope="col">Actions</th>
          </tr>
        </thead>
        <tbody id="employeeTableBody">
          <% for (let listing of allListings) { %>
            <tr class="<%= listing.status %>">
              <td><%= listing._id %></td>
              <td><img src="<% listing.img %>" alt="listing_image" class="img-fluid" style="width: 50px; height: 50px; object-fit: cover;"></td>
              <td><%= listing.name %></td>
              <td><a href="mailto:<%= listing.email %>"><%= listing.email %></a></td>
              <td><%= listing.mobile %></td>
              <td><%= listing.designation %></td>
              <td><%= listing.gender %></td>
              <td><%= listing.course ? listing.course.join(", ") : "N/A" %></td>
              <td><%= new Date(listing.createdAt).toLocaleDateString() %></td>
              <td>
                <div class="d-flex justify-content-start">
                  <a href="/listings/<%= listing._id %>/edit" class="btn btn-dark edit-btn me-2">Edit</a>
                  <form method="POST" action="/listings/<%= listing._id %>?_method=DELETE" class="d-inline">
                    <button class="btn btn-dark">Delete</button>
                  </form>
                </div>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>

      <!-- Pagination (This will depend on your backend pagination) -->
      <div class="d-flex justify-content-center">
        <nav aria-label="Employee Pagination">
          <ul class="pagination">
            <li class="page-item">
              <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
              </a>
            </li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
              <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    </div>

    <script>
      // Function to filter and sort employees by search input, status, and selected sorting criteria
      function applyFilters() {
        const searchQuery = document.getElementById('searchBar').value.toLowerCase();
        const filterStatus = document.getElementById('filterStatus').value;
        const sortBy = document.getElementById('sortBy').value;
        const rows = Array.from(document.querySelectorAll('#employeeTableBody tr'));

        // Filter rows based on search query and status
        const filteredRows = rows.filter(row => {
          const name = row.cells[2].textContent.toLowerCase();
          const email = row.cells[3].textContent.toLowerCase();
          const id = row.cells[0].textContent.toLowerCase();
          const date = new Date(row.cells[8].textContent).toLocaleDateString().toLowerCase();
          const status = row.classList.contains('inactive') ? 'inactive' : 'active';

          // Search condition: matches any of the searched fields
          const matchesSearch = name.includes(searchQuery) || email.includes(searchQuery) || id.includes(searchQuery) || date.includes(searchQuery);

          // Status condition: matches the selected status filter
          const matchesStatus = !filterStatus || status === filterStatus;

          return matchesSearch && matchesStatus;
        });

        // Sort rows based on selected criteria
        if (sortBy) {
          filteredRows.sort((a, b) => {
            let aText, bText;

            if (sortBy === 'name') {
              aText = a.cells[2].textContent.trim().toLowerCase();
              bText = b.cells[2].textContent.trim().toLowerCase();
            } else if (sortBy === 'email') {
              aText = a.cells[3].textContent.trim().toLowerCase();
              bText = b.cells[3].textContent.trim().toLowerCase();
            } else if (sortBy === 'id') {
              aText = a.cells[0].textContent.trim().toLowerCase();
              bText = b.cells[0].textContent.trim().toLowerCase();
            } else if (sortBy === 'createdOn') {
              aText = new Date(a.cells[8].textContent).getTime();
              bText = new Date(b.cells[8].textContent).getTime();
            }

            return aText > bText ? 1 : aText < bText ? -1 : 0;
          });
        }

        // Update the table body with sorted and filtered rows
        const tbody = document.getElementById('employeeTableBody');
        tbody.innerHTML = ''; // Clear the current rows
        filteredRows.forEach(row => tbody.appendChild(row)); // Append filtered and sorted rows
      }
    </script>
  <% } %>
</body>
